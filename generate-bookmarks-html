#!/usr/bin/env bash

# Generate the bookmarks.html file based on the JavaScript files.

# Escape special HTML chars.
escape_html () {
	regex='s/&/\&amp;/g; s/"/\&quot;/g; s/</\&lt;/g; s/>/\&gt;/g;';
	if [ $# -eq 0 ]; then
		sed "$regex";
	else
		sed "$regex" <<< "$@";
	fi;
}

# URL-encode the given string.
url_encode () {
	if [ $# -eq 0 ]; then
		cat;
	else
		echo "$@";
	fi | php -r 'echo rawurlencode(file_get_contents("php://stdin"));';
}

# Loop through *.js in the given directory and recurse for its subdirectories.
process_dir () {
	# Skip certain directories.
	if [ "$(basename "$1")" = 'tests' ]; then
		return;
	fi;

	echo "Now processing directory \"$1\"…" 1>&2;

	# Start the bookmarks folder.
	if [ -f "$1/README" ]; then
		title="$(escape_html <<< "$(head -n 1 "$1/README")")";
		description="$(escape_html <<< "$(tail -n +3 "$1/README")")";
	else
		title="$(escape_html "$(basename "$1")")";
		description="$(escape_html "${1:2}")";
		[ "$title" = "$description" ] && description=;
	fi;
	if [ "$1" = '.' ]; then
		description="$description"$'\n\n'"These bookmarks were exported on $(date +'%a, %Y-%m-%d %T %z').";
	fi;
	cat <<-EOD
		<DT><H3>$title</H3>
		<DD><P>$description</P>
			<DL><P>
	EOD

	shopt -s nullglob;
	for file in "$1"/*/ "$1"/*.js; do
		# Recurse for directories, and indent the output.
		if [ -d "$file" ]; then
			[ -L "${file%/}" ] || process_dir "${file%/}" | sed $'s/^\([[:space:]]*\)</\\1\t</';
			continue;
		fi;

		# Use git log to find the timestamps for the initial and last commits.
		unset add_date last_modified;
		while read timestamp subject; do
			[ -z "$last_modified" -a "${subject:0:1}" != '*' ] && last_modified="$timestamp";
			add_date="$timestamp";
		done < <(git log --follow --pretty='tformat:%at %s' "$file");

		# Get the bookmarklet's metadata.
		unset description title keyword transclude;
		is_in_docblock=0;
		while read -r line; do
			if [ "$line" = '/**' ]; then
				is_in_docblock=1;
				continue;
			elif [ "$line" = '*/' ]; then
				is_in_docblock=0;
			elif [[ "$line" =~ ^\(function\ (.+)\( ]]; then
				[ -z "$keyword" ] && keyword="${BASH_REMATCH[1]}";
				break;
			fi;
			if [[ "$line" =~ ^\*\ @([a-z]*)\ (.*) ]]; then
				tag="${BASH_REMATCH[1]}";
				content="${BASH_REMATCH[2]}";
				case "$tag" in
					'title')
						title="$content";;
					'keyword')
						keyword="$content";;
					'transclude')
						transclude="$content";;
				esac;
				continue;
			fi;
			if [ $is_in_docblock -eq 1 ]; then
				description+=("${line:2}");
			fi;
		done < "$file";

		# Avoid duplicate keywords for the bookmarklets in the Bookmarks
		# toolbar, which are just symlinks to the "real" bookmarklets.
		if [ -L "$file" ]; then
			keyword='';
		fi;

		# Trim blank lines from the start and end of the description.
		if [ "${description[0]}" = '' ]; then
			unset description[0];
		fi;
		for ((i = ${#description[@]} - 1; i >= 0; i--)); do
			if [ "${description[$i]}" = '' ]; then
				unset description[$i];
			fi;
		done;
		description="$(IFS=$'\n'; echo "${description[*]}")";

		# Transclude files, similar to `/etc/alternatives` and symlinking
		# `/usr/bin/foo` to `/usr/bin/gfoo` to allow running `gfoo` as `foo`.
		# (This is not a very advanced system, but Good Enough™.)
		if [ -n "$transclude" ]; then
			transclude="$(dirname "$file")/$transclude";
			if ! [ -e "$transclude" ]; then
				echo "WARNING! Cannot transclude “${transclude}” from “${file}”. Skipping." 1>&2;
				continue;
			fi;

			file="$transclude";
		fi;

		# Output the current bookmarklet.
		cat <<-EOD
			<DT><A HREF="javascript:$(
				# Clean up whitespace.
				< "$file" \
				perl -p -e 's/\\$//g; s/\n/ /g; s/\t//g' |
				perl -p -e 's/\s\s+/ /g; s/^\s+//; s/\s+$//g' |

				# Remove "/* */"-style comments.
				perl -p -e 's@/\*\*? .*? \*/@@g' |

				# Trim now that the comments are gone.
				perl -p -e 's/^\s+//; s/\s+$//' |

				# URL-encode the special characters, but make sure to
				# restore "%s" for the bookmarklet parameter.
				url_encode |
				sed 's/%25s/%s/g'
			)" ADD_DATE="$(escape_html "$add_date")" LAST_MODIFIED="$(escape_html "$last_modified")" SHORTCUTURL="$(escape_html "$keyword")">$(escape_html "$title")</A>
			<DD><P>$(escape_html "$description")</P></DD>
		EOD
	done;

	# End the bookmarks folder.
	cat <<-EOD
			</DL>
	EOD
}

# Export our bookmarks.html.
{
# Output the preamble.
cat <<EOD
<!DOCTYPE NETSCAPE-Bookmark-file-1>
<!-- This is an automatically generated file.
     It will be read and overwritten.
     DO NOT EDIT! -->
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8">
<TITLE>Bookmarks</TITLE>
<STYLE>
html {
	max-width: 60em;
	margin: auto;
	font-family: "Calibri", sans-serif;
}
dd > p {
	margin-top: 0;
	white-space: pre-wrap;
	line-height: 1.5;
}
a[shortcuturl]:not([shortcuturl=""])::after {
	content: " (keyword: " attr(shortcuturl) ")";
	display: inline-block;
	margin-left: 1em;
	font-family: "Consolas", monospace;
}
</STYLE>
<H1>Bookmarks Menu</H1>

<DL>
EOD

# Recursively process this directory and its subdirectories.
process_dir .;

# Wrap it up for the common good.
cat <<EOD
	</DD>
</DL>
EOD
} > bookmarks.html;

# Create a separate version of the bookmarks HTML file without support for
# parameters (`%s`) for inferior browsers.
#
# Safari can’t handle `%s` in bookmarklets, and completely refuses to execute
# them. My guess it does not see `%s` as a placeholder, but as an invalid
# (non-URL-encoded) part of a URL.
#
# Chrome automatically converts bookmarklets with a `%s` into custom search
# engines, but they are inactive by default. You need to activate them in the
# settings. Even then, they are not as useful as in Firefox: when you use the
# keyword without a parameter (so not `vidspeed 1.33` but just `vidspeed`), it
# refuses to execute, instead of letting the prompt fallback code ask for a
# parameter. Sigh.
#
# Bookmarklets without a `%s` get added as normal bookmarks in Chrome, but you
# cannot execute them using the keyword. So no `read` or `nocookie` or `2comm`,
# for instance. Sigh-the-sequel.
sed 's/%s//g' bookmarks.html > bookmarks-without-parameters.html;

# I keep a symlink to bookmarks.html in my Downloads directory so I can quickly
# import it from Firefox's bookmarks manager. My Downloads directory is set to
# display the most recently modified files first, so if I update the symlink's
# timestamp, it will be at the top of the list.
[ -h ~/Downloads/_bookmarks.html ] && touch -h ~/Downloads/_bookmarks.html;
